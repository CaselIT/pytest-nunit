trigger:
- master
name: $(Year:yy)$(DayOfYear)$(Rev:r)
variables:
  majorVer: '0.0.1'

stages:
  - stage: Unit_Test
    jobs:

    - job: 'Test_Linux'
      pool:
        vmImage: 'Ubuntu-16.04'
      strategy:
        matrix:
          Python37:
            python.version: '3.7'
            pytest_version: '>=4.1.0'
        maxParallel: 8

      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
          architecture: 'x64'

      - script: |
          echo "Installing Pytest - $PYTEST_VERSION"
          python -m pip install --upgrade pip
          pip install pytest$PYTEST_VERSION
        env:
          PYTEST_VERSION: $(pytest_version)
      - script: "pip install -e ."
        displayName: 'Install package'

      - script: |
          python -m pytest tests/unit -v --nunit-xml=test-results-unit.xml
        displayName: 'pytest with nunit-xml flag - passes'
      - task: CopyFiles@2
        inputs:
          contents: '**/test-results*.xml'
          targetFolder: $(Build.ArtifactStagingDirectory)
      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: $(Build.ArtifactStagingDirectory)
          artifactName: TestOutput
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: NUnit
          testResultsFiles: '**/test-results*.xml'
  - stage: Integration_Test
    jobs:

    - job: 'Test_Linux'
      pool:
        vmImage: 'Ubuntu-16.04'
      strategy:
        matrix:
          Python37:
            python.version: '3.7'
            pytest_version: '>=4.1.0'
        maxParallel: 8

      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
          architecture: 'x64'

      - script: |
          echo "Installing Pytest - $PYTEST_VERSION"
          python -m pip install --upgrade pip
          pip install pytest$PYTEST_VERSION
        env:
          PYTEST_VERSION: $(pytest_version)
      - script: |
          pip install -e .
          pip install -r requirements-dev.txt
        displayName: 'Install package and dependencies'

      - script: |
          python -m pytest tests/integration -v --nunit-xml=test-results-integration.xml
        displayName: 'pytest with nunit-xml flag - passes'
      - task: CopyFiles@2
        inputs:
          contents: '**/test-results*.xml'
          targetFolder: $(Build.ArtifactStagingDirectory)
      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: $(Build.ArtifactStagingDirectory)
          artifactName: TestOutput
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: NUnit
          testResultsFiles: '**/test-results*.xml'
